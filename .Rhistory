source('~/Escritorio/householder/robusto/script/robusto/robusto_marzo_06/dist_contrib.R')
source('~/Escritorio/householder/robusto/script/robusto/robusto_marzo_06/matching_symm.R')
source('~/Escritorio/householder/robusto/script/robusto/robusto_marzo_06/object_symm.R')
source('~/Escritorio/householder/robusto/script/robusto/robusto_marzo_06/plot_result.R')
source('~/Escritorio/householder/robusto/script/robusto/robusto_marzo_06/center.R')
A<-array(c(362,362,362,391,407,360,107,281,301,272,278,264,65,600,442,429,462,444,467,654,609,409,353,285,175,38,508,549,433,408,359,226,529,530,547,415,377,341,263,528),dim=c(20,2,2))
object.symm(A,ctr = "median")
object.symm(A)
A
setwd("~/Escritorio/householder/robusto/script/robusto/robusto_marzo_06")
object.symm(A,ctr = "median")
getwd()
arcsin
asin(.7)
asin(1)
asin(pi/2)
asin(pi/2)
pi/2
asin(1)
pi/2
sin(pi/2)
sin((pi/4)+3)
sin((pi/4)*3)
sin(pi/2)
sin((pi/4))
sin((pi/4)*3)
setwd("~/Documentos/robusto_git")
source('~/Documentos/robusto_git/datos_matching.R')
side.file="side.txt"
side<-read.table(side.file,sep=" ",header=F)
nd<-length(A[1,,1])#numero de dimensiones
nl<-length(A[,1,1])#numero de landmarks
n<-dim(A)[3]/2
#--------------------------centrado----------------
Mc<-center(A,cent=ctr)
#---------- crea arrays por lado
Mcl<-Mc[,,side=="L"]
Mcr<-Mc[,,side=="R"]
dv<-Mcl-Mcr
source('~/Documentos/robusto_git/center.R')
side<-read.table(side.file,sep=" ",header=F)
nd<-length(A[1,,1])#numero de dimensiones
nl<-length(A[,1,1])#numero de landmarks
n<-dim(A)[3]/2
#--------------------------centrado----------------
Mc<-center(A,cent=ctr)
#---------- crea arrays por lado
Mcl<-Mc[,,side=="L"]
Mcr<-Mc[,,side=="R"]
dv<-Mcl-Mcr
ctr="gmedian"
side<-read.table(side.file,sep=" ",header=F)
nd<-length(A[1,,1])#numero de dimensiones
nl<-length(A[,1,1])#numero de landmarks
n<-dim(A)[3]/2
#--------------------------centrado----------------
Mc<-center(A,cent=ctr)
#---------- crea arrays por lado
Mcl<-Mc[,,side=="L"]
Mcr<-Mc[,,side=="R"]
dv<-Mcl-Mcr
dv
mod<-sqrt((dv[,1,]^2)+(dv[,2,]^2))#norma
mod
dv/N
dv/mod
array(mod,c(dim(dv)[1],n,2))
array(c(1:64),c(dim(dv)[1],n,2))
array(c(1:64),c(dim(dv)[1],3,2))
mod<-sqrt((dv[,1,]^2)+(dv[,2,]^2))#norma
N<-aperm(array(mod,c(dim(dv)[1],n,2)),c(1,3,2))#crea array con la norma repetida, para operar con el array de vectores (abajo)
dvn<-dv/N
dvn
dvnp<-apply(dvn,c(1),function(x)if(x[1]<0) {x<-x*-1}else{x})
dvnp
dvn
dvnp<-apply(dvn,c(2,3),function(x)if(x[1]<0) {x<-x*-1}else{x})
dvn
dvnp
dvn
asin(dvnp[,1,])
dr<-apply(par.mat,2,median)
par.mat<-asin(dvnp[,1,])
dr<-apply(par.mat,2,median)
dr
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
library(Robgit)
library(Gmedian)
source('~/Documentos/robusto_git/plot_result.R')
source('~/Documentos/robusto_git/dist_contrib.R')
sink()
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
side<-read.table(side.file,sep=" ",header=F)
nd<-length(A[1,,1])#numero de dimensiones
nl<-length(A[,1,1])#numero de landmarks
n<-dim(A)[3]/2
#--------------------------centrado----------------
Mc<-center(A,cent=ctr)
#---------- crea arrays por lado
Mcl<-Mc[,,side=="L"]
Mcr<-Mc[,,side=="R"]
dv<-Mcl-Mcr
mod<-sqrt((dv[,1,]^2)+(dv[,2,]^2))#norma
N<-aperm(array(mod,c(dim(dv)[1],n,2)),c(1,3,2))#crea array con la norma repetida, para operar con el array de vectores (abajo)
dvn<-dv/N #normaliza los vecotres diferencia
dvnp<-apply(dvn,c(2,3),function(x)if(x[1]<0) {x<-x*-1}else{x})
par.mat<-asin(dvnp[,1,])
#ang.par<-atan(dv[,2,]/dv[,1,])#angulo en radianes
#par.mat<-apply(ang.par,c(1,2),function(x)if(x<0) {pi-abs(x)}else{x})#esto hace que los ángulos sean todos positivos entre 0 y pi
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
ang.par<-atan(dv[,2,]/dv[,1,])#angulo en radianes
par.mat<-apply(ang.par,c(1,2),function(x)if(x<0) {pi-abs(x)}else{x})#esto hace que los ángulos sean todos positivos entre 0 y pi
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
S
source('~/Documentos/robusto_git/datos_matching.R')
library(MASS)
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
legend.loc="topleft"
ctr="gmedian"
ctr="median"
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
ctr="mean"
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
ctr="median"
side<-read.table(side.file,sep=" ",header=F)
nd<-length(A[1,,1])#numero de dimensiones
nl<-length(A[,1,1])#numero de landmarks
n<-dim(A)[3]/2
#--------------------------centrado----------------
Mc<-center(A,cent=ctr)
#---------- crea arrays por lado
Mcl<-Mc[,,side=="L"]
Mcr<-Mc[,,side=="R"]
dv<-Mcl-Mcr
mod<-sqrt((dv[,1,]^2)+(dv[,2,]^2))#norma
N<-aperm(array(mod,c(dim(dv)[1],n,2)),c(1,3,2))#crea array con la norma repetida, para operar con el array de vectores (abajo)
dvn<-dv/N #normaliza los vecotres diferencia
dvnp<-apply(dvn,c(2,3),function(x)if(x[1]<0) {x<-x*-1}else{x})
par.mat<-asin(dvnp[,1,])
#ang.par<-atan(dv[,2,]/dv[,1,])#angulo en radianes
#par.mat<-apply(ang.par,c(1,2),function(x)if(x<0) {pi-abs(x)}else{x})#esto hace que los ángulos sean todos positivos entre 0 y pi
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
vr<-cbind(sin(dr),cos(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
par.mat
dvnp<-apply(dvn,c(2,3),function(x)if(x[1]<0) {x<-x*-1}else{x})
par.mat<-asin(dvnp[,1,])
par.mat
dr<-apply(par.mat,2,median)#
dr
sin(dr)
cbind(cos(dr),sin(dr))
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
U<-S
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
cbind(cos(dr),sin(dr))
dr
pi/2
plot(A[,,1])
plot(A[,,1],asp = 1)
plot(A[,,2],asp = 1)
dvnp
mod<-sqrt((dv[,1,]^2)+(dv[,2,]^2))#norma
N<-aperm(array(mod,c(dim(dv)[1],n,2)),c(1,3,2))#crea array con la norma repetida, para operar con el array de vectores (abajo)
dvn<-dv/N #normaliza los vecotres diferencia
dvnp<-apply(dvn,c(2,3),function(x)if(x[1]<0) {x<-x*-1}else{x})
par.mat<-acos(dvnp[,1,])
#ang.par<-atan(dv[,2,]/dv[,1,])#angulo en radianes
#par.mat<-apply(ang.par,c(1,2),function(x)if(x<0) {pi-abs(x)}else{x})#esto hace que los ángulos sean todos positivos entre 0 y pi
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
side<-read.table(side.file,sep=" ",header=F)
nd<-length(A[1,,1])#numero de dimensiones
nl<-length(A[,1,1])#numero de landmarks
n<-dim(A)[3]/2
#--------------------------centrado----------------
Mc<-center(A,cent=ctr)
#---------- crea arrays por lado
Mcl<-Mc[,,side=="L"]
Mcr<-Mc[,,side=="R"]
dv<-Mcl-Mcr
mod<-sqrt((dv[,1,]^2)+(dv[,2,]^2))#norma
N<-aperm(array(mod,c(dim(dv)[1],n,2)),c(1,3,2))#crea array con la norma repetida, para operar con el array de vectores (abajo)
dvn<-dv/N #normaliza los vecotres diferencia
dvnp<-apply(dvn,c(2,3),function(x)if(x[1]<0) {x<-x*-1}else{x})
par.mat<-acos(dvnp[,1,])
#ang.par<-atan(dv[,2,]/dv[,1,])#angulo en radianes
#par.mat<-apply(ang.par,c(1,2),function(x)if(x<0) {pi-abs(x)}else{x})#esto hace que los ángulos sean todos positivos entre 0 y pi
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
vr
dr
vr
dvnp<-apply(dvn,c(2,3),function(x)if(x[1]<0) {x<-x*-1}else{x})
par.mat<-acos(dvnp[,1,])
par.mat
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr+pi),sin(dr+pi))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
dvnp<-apply(dvn,c(2,3),function(x)if(x[1]<0) {x<-x*-1}else{x})
par.mat<-acos(dvnp[,1,])
#ang.par<-atan(dv[,2,]/dv[,1,])#angulo en radianes
#par.mat<-apply(ang.par,c(1,2),function(x)if(x<0) {pi-abs(x)}else{x})#esto hace que los ángulos sean todos positivos entre 0 y pi
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr+pi),sin(dr+pi))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
par.mat
dr
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
#calcula y aplica la matriz de Householder
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcr[,,i]%*%R
}
S<-array(t(c(Mcl,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
ang.par<-atan(dv[,2,]/dv[,1,])#angulo en radianes
par.mat<-apply(ang.par,c(1,2),function(x)if(x<0) {pi-abs(x)}else{x})#esto hace que los ángulos sean todo
par.mat
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
vr
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
vr
dvnp<-apply(dvn,c(2,3),function(x)if(x[1]<0) {x<-x*-1}else{x})
par.mat<-acos(dvnp[,1,])
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
vr
par.mat<-acos(dvn[,1,])
dr<-apply(par.mat,2,median)#saca la dirección mediana (aún en radianes)
vr<-cbind(cos(dr),sin(dr))#vectores unitarios definidos por sus proyecciones sobre x e y a partir de seno y coseno del angulo de menores proyecciones
vr
Ur<-array(0,dim(Mcl))
for(i in 1:n){
R<-diag(2) - 2*vr[i,]%*%t(vr[i,])
Ur[,,i] <- Mcl[,,i]%*%R
}
S<-array(t(c(Mcr,Ur)),c(nl,2,(n*2)))
print("please wait...",quote = F)
sink("/dev/null")
U<-robgit(S)#un ajuste robusto para eliminar pequeñas diferencias
sink()
Ui<-U[,,1:n]
Ud<-U[,,(n+1):(n*2)]
#saca contrib % de cada punto
distances<-dist.contrib(mc=Ui,mre=Ud)
#plots
plot.result(mc=Ud, mre =Ui, nconf = n,legloc = legend.loc,object=F)
par.mat<-acos(ndv[,1,])
ndv<-dv/N #normaliza los vecotres diferencia
#dvnp<-apply(dvn,c(2,3),function(x)if(x[1]<0) {x<-x*-1}else{x})
par.mat<-acos(ndv[,1,])
source('~/Documentos/robusto_git/matching_symm.R')
matching.symm(A,ctr = "median")
getwd()
source('~/Documentos/robusto_git/plot_result.R')
matching.symm(A,ctr = "median")
matching.symm(A,ctr = "mean")
matching.symm(A,ctr = "median")
matching.symm(A,ctr = "mean")
matching.symm(A,ctr = "gmedian")
source('~/Documentos/robusto_git/matching_symm.R')
matching.symm(A,ctr = "gmedian")
matching.symm(A,ctr = "mean")
matching.symm(A,ctr = "median")
